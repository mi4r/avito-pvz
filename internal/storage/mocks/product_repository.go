// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/mi4r/avito-pvz/internal/storage"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, receptionID, productType
func (_m *ProductRepository) AddProduct(ctx context.Context, receptionID uuid.UUID, productType string) (storage.Product, error) {
	ret := _m.Called(ctx, receptionID, productType)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 storage.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (storage.Product, error)); ok {
		return rf(ctx, receptionID, productType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) storage.Product); ok {
		r0 = rf(ctx, receptionID, productType)
	} else {
		r0 = ret.Get(0).(storage.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, receptionID, productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) DeleteProduct(ctx context.Context, productID uuid.UUID) error {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastProduct provides a mock function with given fields: ctx, receptionID
func (_m *ProductRepository) GetLastProduct(ctx context.Context, receptionID uuid.UUID) (storage.Product, error) {
	ret := _m.Called(ctx, receptionID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastProduct")
	}

	var r0 storage.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (storage.Product, error)); ok {
		return rf(ctx, receptionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) storage.Product); ok {
		r0 = rf(ctx, receptionID)
	} else {
		r0 = ret.Get(0).(storage.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, receptionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/mi4r/avito-pvz/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, email, passwordHash, role
func (_m *UserRepository) CreateUser(ctx context.Context, email string, passwordHash string, role string) (storage.User, error) {
	ret := _m.Called(ctx, email, passwordHash, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (storage.User, error)); ok {
		return rf(ctx, email, passwordHash, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) storage.User); ok {
		r0 = rf(ctx, email, passwordHash, role)
	} else {
		r0 = ret.Get(0).(storage.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, email, passwordHash, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string) (storage.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (storage.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) storage.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(storage.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
